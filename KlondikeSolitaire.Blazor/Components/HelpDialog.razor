@using KlondikeSolitaire.Core.Models

<div class="help-overlay @(IsVisible ? "visible" : "")" @onclick="OnOverlayClick">
    <div class="help-dialog" @onclick:stopPropagation>
        <div class="help-header">
            <h2>Help</h2>
            <button class="close-btn" @onclick="OnClose">âœ•</button>
        </div>

        <div class="help-tabs">
            <button class="tab-btn @(activeTab == "current" ? "active" : "")" @onclick='() => activeTab = "current"'>
                Current Rules
            </button>
            <button class="tab-btn @(activeTab == "guide" ? "active" : "")" @onclick='() => activeTab = "guide"'>
                Rule Guide
            </button>
        </div>

        <div class="help-body">
            @if (activeTab == "current" && CurrentOptions != null)
            {
                <div class="help-section">
                    <h3>Your Current Game Rules</h3>

                    <div class="rule-item">
                        <strong>Draw Count:</strong> @CurrentOptions.DrawCount card@(CurrentOptions.DrawCount > 1 ? "s" : "")
                        <p>You draw @CurrentOptions.DrawCount card@(CurrentOptions.DrawCount > 1 ? "s" : "") from the stock at a time.</p>
                    </div>

                    <div class="rule-item">
                        <strong>Redeals:</strong> @(CurrentOptions.MaxStockRedeals < 0 ? "Unlimited" : CurrentOptions.MaxStockRedeals.ToString())
                        <p>@(CurrentOptions.MaxStockRedeals < 0 ? "You can recycle the waste pile unlimited times." : CurrentOptions.MaxStockRedeals == 0 ? "You cannot recycle the waste pile." : $"You can recycle the waste pile {CurrentOptions.MaxStockRedeals} time{(CurrentOptions.MaxStockRedeals > 1 ? "s" : "")}.")</p>
                    </div>

                    <div class="rule-item">
                        <strong>Empty Columns:</strong> @(CurrentOptions.AllowAnyCardInEmptyTableau ? "Any card" : "Kings only")
                        <p>@(CurrentOptions.AllowAnyCardInEmptyTableau ? "Any card can be placed in an empty tableau column." : "Only Kings can be placed in empty tableau columns.")</p>
                    </div>

                    <div class="rule-item">
                        <strong>Foundation to Tableau:</strong> @(CurrentOptions.AllowFoundationToTableau ? "Allowed" : "Not allowed")
                        <p>@(CurrentOptions.AllowFoundationToTableau ? "You can move cards from foundations back to the tableau." : "Cards cannot be moved from foundations back to the tableau.")</p>
                    </div>

                    <div class="rule-item">
                        <strong>Scoring:</strong> @(CurrentOptions.EnableScoring ? "Enabled" : "Disabled")
                        <p>@(CurrentOptions.EnableScoring ? "Points and time are tracked during gameplay." : "No scoring or time tracking.")</p>
                    </div>

                    <div class="rule-item">
                        <strong>Game Over Notifications:</strong> @(CurrentOptions.NotifyWhenNoMovesAvailable ? "On" : "Off")
                        <p>@(CurrentOptions.NotifyWhenNoMovesAvailable ? "You'll be notified when no more moves are available." : "No notification when stuck.")</p>
                    </div>

                    <div class="rule-item">
                        <strong>Auto-Complete:</strong> @(CurrentOptions.AutoCompleteWhenPossible ? "Enabled" : "Disabled")
                        <p>@(CurrentOptions.AutoCompleteWhenPossible ? "Game automatically completes when stock and waste are empty and all tableau cards are face-up." : "You must manually move all cards to foundations.")</p>
                    </div>
                </div>
            }
            else if (activeTab == "guide")
            {
                <div class="help-section">
                    <h3>How to Play Klondike Solitaire</h3>

                    <div class="rule-item">
                        <strong>Goal:</strong>
                        <p>Move all 52 cards to the four foundation piles, building each suit from Ace to King.</p>
                    </div>

                    <div class="rule-item">
                        <strong>Tableau Rules:</strong>
                        <p>Build down in descending order (K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2, A) with alternating colors (red-black-red or black-red-black).</p>
                    </div>

                    <div class="rule-item">
                        <strong>Foundation Rules:</strong>
                        <p>Build up in ascending order (A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K) by suit. Each foundation starts with an Ace.</p>
                    </div>

                    <h3>Rule Options</h3>

                    <div class="rule-item">
                        <strong>Draw (1 or 3 cards):</strong>
                        <p>Determines how many cards are drawn from the stock at once. Draw 1 is easier, Draw 3 is the standard/harder mode.</p>
                    </div>

                    <div class="rule-item">
                        <strong>Redeals (0 to Unlimited):</strong>
                        <p>How many times you can recycle the waste pile back to the stock. Unlimited allows infinite redeals. Limited redeals increase difficulty.</p>
                    </div>

                    <div class="rule-item">
                        <strong>Any Card in Empty Column:</strong>
                        <p>When enabled, any card can be placed in an empty tableau column. When disabled (standard rules), only Kings can fill empty columns.</p>
                    </div>

                    <div class="rule-item">
                        <strong>Foundation to Tableau:</strong>
                        <p>When enabled, cards can be moved from foundations back to the tableau for strategic play. Disabled in traditional rules.</p>
                    </div>

                    <div class="rule-item">
                        <strong>Scoring:</strong>
                        <p>Tracks your score based on moves (foundation moves earn points, redeals lose points) and time elapsed.</p>
                    </div>

                    <div class="rule-item">
                        <strong>Game Over Notification:</strong>
                        <p>Alerts you when no legal moves remain based on your current ruleset, allowing you to start a new game or undo your last move.</p>
                    </div>

                    <div class="rule-item">
                        <strong>Auto-Complete:</strong>
                        <p>Automatically completes the game when the stock and waste are empty and all tableau cards are face-up. Saves time on the final moves when victory is guaranteed.</p>
                    </div>
                </div>
            }
        </div>

        <div class="help-footer">
            <button @onclick="OnClose" class="btn btn-primary">Got it!</button>
        </div>
    </div>
</div>

<style>
    .help-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .help-overlay.visible {
        display: flex;
    }

    .help-dialog {
        background: white;
        border-radius: 12px;
        width: 90%;
        max-width: 700px;
        max-height: 85vh;
        display: flex;
        flex-direction: column;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
    }

    .help-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px 20px;
        border-bottom: 1px solid #e0e0e0;
    }

    .help-header h2 {
        margin: 0;
        color: #333;
        font-size: 1.4rem;
    }

    .close-btn {
        background: none;
        border: none;
        font-size: 1.8rem;
        cursor: pointer;
        color: #757575;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: all 0.2s ease;
    }

    .close-btn:hover {
        background: #f5f5f5;
        color: #333;
    }

    .help-tabs {
        display: flex;
        border-bottom: 2px solid #e0e0e0;
        background: #f9f9f9;
    }

    .tab-btn {
        flex: 1;
        padding: 12px 16px;
        border: none;
        background: transparent;
        color: #666;
        font-size: 0.95rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        border-bottom: 3px solid transparent;
    }

    .tab-btn:hover {
        background: rgba(0, 0, 0, 0.05);
    }

    .tab-btn.active {
        color: #4CAF50;
        border-bottom-color: #4CAF50;
        background: white;
    }

    .help-body {
        overflow-y: auto;
        padding: 20px;
        flex: 1;
    }

    .help-section h3 {
        margin: 0 0 16px 0;
        color: #333;
        font-size: 1.2rem;
    }

    .rule-item {
        margin-bottom: 16px;
        padding: 12px;
        background: #f9f9f9;
        border-radius: 6px;
        border-left: 4px solid #4CAF50;
    }

    .rule-item strong {
        color: #333;
        font-size: 1rem;
        display: block;
        margin-bottom: 4px;
    }

    .rule-item p {
        margin: 0;
        color: #666;
        font-size: 0.9rem;
        line-height: 1.5;
    }

    .help-footer {
        padding: 16px 20px;
        border-top: 1px solid #e0e0e0;
        display: flex;
        justify-content: center;
    }

    @@media (max-width: 480px) {
        .help-dialog {
            max-width: 95%;
            max-height: 90vh;
        }

        .help-header h2 {
            font-size: 1.2rem;
        }

        .help-body {
            padding: 16px;
        }

        .tab-btn {
            font-size: 0.9rem;
            padding: 10px 12px;
        }
    }
</style>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public GameOptions? CurrentOptions { get; set; }

    private string activeTab = "current";

    private async Task OnClose()
    {
        await OnCancel.InvokeAsync();
    }

    private async Task OnOverlayClick()
    {
        await OnClose();
    }
}
