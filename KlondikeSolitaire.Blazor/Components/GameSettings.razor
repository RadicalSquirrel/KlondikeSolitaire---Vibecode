@using KlondikeSolitaire.Core.Models

<div class="settings-overlay @(IsVisible ? "visible" : "")" @onclick="OnOverlayClick">
    <div class="settings-dialog" @onclick:stopPropagation>
        <div class="settings-header">
            <h2>New Game Settings</h2>
            <button class="close-btn" @onclick="OnClose">âœ•</button>
        </div>

        <div class="settings-body">
            <div class="setting-group">
                <label>
                    <input type="checkbox" @bind="options.AllowAnyCardInEmptyTableau" />
                    <span>Allow any card in empty tableau column</span>
                </label>
                <p class="setting-description">When disabled, only Kings can be placed in empty tableau columns (standard rules)</p>
            </div>

            <div class="setting-group">
                <label>Draw Count</label>
                <select @bind="drawCountString" class="setting-select">
                    <option value="1">Draw 1 Card (Easier)</option>
                    <option value="3">Draw 3 Cards (Standard)</option>
                </select>
            </div>

            <div class="setting-group">
                <label>
                    <input type="checkbox" @bind="options.AllowFoundationToTableau" />
                    <span>Allow moving cards from Foundation back to Tableau</span>
                </label>
                <p class="setting-description">Enable strategic moves by allowing cards to be moved back from foundations</p>
            </div>

            <div class="setting-group">
                <label>Maximum Stock Redeals</label>
                <select @bind="redealString" class="setting-select">
                    <option value="-1">Unlimited</option>
                    <option value="0">None</option>
                    <option value="1">1 Redeal</option>
                    <option value="2">2 Redeals</option>
                    <option value="3">3 Redeals</option>
                </select>
            </div>

            <div class="setting-group">
                <label>
                    <input type="checkbox" @bind="options.EnableScoring" />
                    <span>Enable Scoring</span>
                </label>
                <p class="setting-description">Track your score and time during gameplay</p>
            </div>
        </div>

        <div class="settings-footer">
            <button @onclick="OnStartGame" class="btn btn-primary">Start Game</button>
            <button @onclick="OnClose" class="btn btn-secondary">Cancel</button>
        </div>
    </div>
</div>

<style>
    .settings-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .settings-overlay.visible {
        display: flex;
    }

    .settings-dialog {
        background: white;
        border-radius: 12px;
        width: 90%;
        max-width: 600px;
        max-height: 90vh;
        overflow: auto;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
    }

    .settings-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px 25px;
        border-bottom: 1px solid #e0e0e0;
    }

    .settings-header h2 {
        margin: 0;
        color: #333;
        font-size: 1.8rem;
    }

    .close-btn {
        background: none;
        border: none;
        font-size: 1.8rem;
        cursor: pointer;
        color: #757575;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: all 0.2s ease;
    }

    .close-btn:hover {
        background: #f5f5f5;
        color: #333;
    }

    .settings-body {
        padding: 25px;
    }

    .setting-group {
        margin-bottom: 25px;
    }

    .setting-group label {
        display: block;
        font-weight: 600;
        color: #333;
        margin-bottom: 8px;
        font-size: 1.1rem;
    }

    .setting-group label input[type="checkbox"] {
        margin-right: 10px;
        width: 18px;
        height: 18px;
        cursor: pointer;
    }

    .setting-group label span {
        cursor: pointer;
    }

    .setting-description {
        margin: 8px 0 0 0;
        color: #757575;
        font-size: 0.9rem;
        line-height: 1.4;
    }

    .setting-select {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #ccc;
        border-radius: 6px;
        font-size: 1rem;
        background: white;
        cursor: pointer;
        transition: border-color 0.2s ease;
    }

    .setting-select:focus {
        outline: none;
        border-color: #4CAF50;
    }

    .settings-footer {
        padding: 20px 25px;
        border-top: 1px solid #e0e0e0;
        display: flex;
        gap: 10px;
        justify-content: flex-end;
    }
</style>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<GameOptions> OnStartNewGame { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private GameOptions options = new GameOptions();
    private string drawCountString = "1";
    private string redealString = "-1";

    protected override void OnInitialized()
    {
        ResetToDefaults();
    }

    private void ResetToDefaults()
    {
        options = new GameOptions
        {
            AllowAnyCardInEmptyTableau = false,
            DrawCount = 1,
            AllowFoundationToTableau = false,
            MaxStockRedeals = -1,
            EnableScoring = true
        };
        drawCountString = "1";
        redealString = "-1";
    }

    private async Task OnStartGame()
    {
        options.DrawCount = int.Parse(drawCountString);
        options.MaxStockRedeals = int.Parse(redealString);

        await OnStartNewGame.InvokeAsync(options);
        ResetToDefaults();
    }

    private async Task OnClose()
    {
        await OnCancel.InvokeAsync();
    }

    private async Task OnOverlayClick()
    {
        await OnClose();
    }
}
